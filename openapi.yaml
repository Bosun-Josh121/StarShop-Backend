openapi: 3.1.0
info:
  title: Project API Documentation
  description: API documentation for onboarding contributors
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Local server
paths:
  /healthcheck:
    get:
      tags: [Monitoring]
      summary: Service health check
      description: Returns the health status of the service
      responses:
        "200":
          description: API is running!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-08-21T14:30:00Z"

  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - cookieAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"

    post:
      tags: [Users]
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/ValidationError"

  /users/show/{id}:
    get:
      tags: [Users]
      summary: Get a specific user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      security:
        - cookieAuth: []
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"

  /users/update/{id}:
    put:
      tags: [Users]
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/ValidationError"
        404:
          $ref: "#/components/responses/NotFound"

  /users/delete/{id}:
    delete:
      tags: [Users]
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      security:
        - cookieAuth: []
      responses:
        204:
          description: User deleted successfully
        404:
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        walletAddress:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [buyer, seller, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateUserDto:
      type: object
      required:
        - walletAddress
        - role
      properties:
        walletAddress:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          example: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [buyer, seller, admin]
          example: "buyer"

    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "Updated Name"
        email:
          type: string
          format: email
          example: "updated@example.com"
        role:
          type: string
          enum: [buyer, seller, admin]
          example: "seller"

  responses:
    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
    ValidationError:
      description: Validation error in request body
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string
    NotFound:
      description: Resource not found

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId
