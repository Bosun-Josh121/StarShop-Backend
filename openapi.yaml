openapi: 3.1.0
info:
  title: StarShop API Documentation
  description: API documentation for StarShop - Stellar Wallet Authentication
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Local server
paths:
  /healthcheck:
    get:
      tags: [Monitoring]
      summary: Service health check
      description: Returns the health status of the service
      responses:
        "200":
          description: API is running!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-08-21T14:30:00Z"

  /auth/challenge:
    post:
      tags: [Auth]
      summary: Generate authentication challenge
      description: Generate a challenge message for Stellar wallet authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletAddress
              properties:
                walletAddress:
                  type: string
                  pattern: '^G[A-Z2-7]{55}$'
                  example: "GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE"
                  description: Stellar wallet address (public key)
      responses:
        200:
          description: Challenge generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      challenge:
                        type: string
                        example: "StarShop Authentication Challenge - GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE - 1234567890"
                      walletAddress:
                        type: string
                        example: "GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE"
                      timestamp:
                        type: integer
                        example: 1234567890
        400:
          $ref: "#/components/responses/ValidationError"

  /auth/login:
    post:
      tags: [Auth]
      summary: Login with Stellar wallet
      description: Authenticate user using Stellar wallet signature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletAddress
                - signature
                - message
              properties:
                walletAddress:
                  type: string
                  pattern: '^G[A-Z2-7]{55}$'
                  example: "GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE"
                  description: Stellar wallet address (public key)
                signature:
                  type: string
                  example: "MEUCIQDexample=="
                  description: Base64 encoded signature of the challenge message
                message:
                  type: string
                  example: "StarShop Authentication Challenge - GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE - 1234567890"
                  description: The challenge message that was signed
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      expiresIn:
                        type: integer
                        example: 3600
                        description: Token expiration time in seconds
          headers:
            Set-Cookie:
              description: JWT token in HttpOnly cookie
              schema:
                type: string
                example: "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationError"

  /auth/register:
    post:
      tags: [Auth]
      summary: Register with Stellar wallet
      description: Register new user using Stellar wallet signature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletAddress
                - signature
                - message
              properties:
                walletAddress:
                  type: string
                  pattern: '^G[A-Z2-7]{55}$'
                  example: "GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE"
                  description: Stellar wallet address (public key)
                signature:
                  type: string
                  example: "MEUCIQDexample=="
                  description: Base64 encoded signature of the challenge message
                message:
                  type: string
                  example: "StarShop Authentication Challenge - GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE - 1234567890"
                  description: The challenge message that was signed
                name:
                  type: string
                  example: "John Doe"
                  description: User's display name (optional)
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                  description: User's email address (optional)
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      expiresIn:
                        type: integer
                        example: 3600
                        description: Token expiration time in seconds
          headers:
            Set-Cookie:
              description: JWT token in HttpOnly cookie
              schema:
                type: string
                example: "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict"
        400:
          $ref: "#/components/responses/ValidationError"
        409:
          description: Wallet address already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Wallet address already registered"

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user
      description: Get information about the currently authenticated user
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Authenticated user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"

  /auth/logout:
    delete:
      tags: [Auth]
      summary: Logout user
      description: Clear authentication session and logout user
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logged out successfully"
          headers:
            Set-Cookie:
              description: Clear JWT token cookie
              schema:
                type: string
                example: "token=; HttpOnly; Secure; SameSite=Strict; Max-Age=0"

  /users:
    get:
      tags: [Users]
      summary: Get all users (Admin only)
      description: Retrieve list of all users (requires admin role)
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    post:
      tags: [Users]
      summary: Create a new user (Register)
      description: Register new user using Stellar wallet authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserDto"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      expiresIn:
                        type: integer
                        example: 3600
          headers:
            Set-Cookie:
              description: JWT token in HttpOnly cookie
              schema:
                type: string
                example: "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict"
        400:
          $ref: "#/components/responses/ValidationError"

  /users/update/{id}:
    put:
      tags: [Users]
      summary: Update user by ID
      description: Update user information (own profile or admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /users/{id}:
    get:
      tags: [Users]
      summary: Get a specific user by ID
      description: Get user information (own profile or admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: JWT token stored in HttpOnly cookie
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token in Authorization header

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        walletAddress:
          type: string
          pattern: '^G[A-Z2-7]{55}$'
          example: "GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [buyer, seller, admin]
          example: "buyer"
        createdAt:
          type: string
          format: date-time
          example: "2023-08-21T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-08-21T14:30:00Z"

    RegisterUserDto:
      type: object
      required:
        - walletAddress
        - signature
        - message
      properties:
        walletAddress:
          type: string
          pattern: '^G[A-Z2-7]{55}$'
          example: "GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE"
        signature:
          type: string
          example: "MEUCIQDexample=="
        message:
          type: string
          example: "StarShop Authentication Challenge - GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE - 1234567890"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"

    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"

    CreateUserDto:
      type: object
      required:
        - walletAddress
      properties:
        walletAddress:
          type: string
          pattern: '^G[A-Z2-7]{55}$'
          example: "GDRXE2BQUC3AZ6H4YOVGJK2D5SUKZMAWDVSTXWF3SZEUZ6FWERVC7ESE"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Validation failed"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Unauthorized"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Access denied"

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Resource not found"
